% function [  voxel_percentages_basedon_allMaps, ...
%             voxel_percentages_basedon_theMask, ...
%             voxel_value_percentages_basedon_allMaps, ...
%             voxel_value_percentages_basedon_theMask, ...
%             names]=FG_ICA_CBF_overlay_separation(ICA_maps,mask,CBFs)

function FG_ICA_CBF_overlay_separation(ICA_maps,mask,CBFs)
clc;clear;close all
if nargin==0
% select the CBF-network images
    ICA_maps = spm_select(inf,'.img|.nii','Select a group of ICA-CBF maps generated by an ICA analysis', [],pwd,'^all149*.*nii');
    [pths,names]=FG_separate_files_into_name_and_path(ICA_maps);
    clear pths
    root_template=fullfile(FG_rootDir('grocer'),'Templates');
    mask = spm_select(inf,'.img|.nii','Select the global mask for running ICA', [],root_template,'^Gray*.*');
    
%     n=inputdlg('how many wMeanCBF groups do you want to select?','Hi...',1,{'1'}); n=str2num(n{1});
    CBFs_dir = spm_select(inf,'dir','Select the folders of global-mean CBF maps of all subjs', [],pwd);
    n_dir=size(CBFs_dir,1);
end

% read maps and make sure they are binarized and no-NaN
[Vs,Vmats]=FG_read_vols(ICA_maps);
x=size(Vs,1);
y=size(Vs,2);
z=size(Vs,3);
Maps=size(Vs,4);


Vmat=Vmats(1);
Vs=FG_make_sure_binary_img(Vs);
Vmask=FG_read_vols(mask);
Vmask=FG_make_sure_binary_img(Vmask);
voxel_num_of_the_mask=sum(Vmask(:));

% mask all the CBF¡¡maps
Vmask_4D = repmat(Vmask,[1,1,1,Maps]);
clear Vmats
Vs = Vs.*Vmask_4D;

% judge whether each two are overlay 
    % initialize the overlay matrix
    %     overlay_mat=zeros(Maps,Maps);
    %     for i=1:Maps-1
    %         for j=i+1:Maps
    %            product = Vs(:,:,:,i).*Vs(:,:,:,j);
    %            product = squeeze(product);
    %            Sum_of_all_voxel = sum(product(:));
    %            if Sum_of_all_voxel
    %               overlay_mat(i,j)=1; 
    %            end
    %         end    
    %     end

Vs_2d=reshape(Vs,[x*y*z,Maps]);
voxel_num_in_all_maps=sum(logical(sum(Vs_2d,2)));
% Vmask_2D=reshape(Vmask_4D,[x*y*z,Maps]);
clear Vs Vmask_4D   %% release some memory


% get the overlay times of each voxel and create the weight for the overlay
% voxels on each ICA-map

overlay_times = sum(Vs_2d,2); % sum the values (i.e. 0 or 1) of each voxel across ICA-maps
weight = 1./overlay_times; % to the the weight for each voxel. for 1/0 situation, you will get inf values
% clear overlay_times
weight=FG_make_sure_inf_to_zero_img(weight); % make the inf values into zeros
weight_2d=repmat(weight,[1,Maps]);
Vs_weighted_2d=Vs_2d.*weight_2d; % each voxel value (i.e. 0 or 1) is multipled by the weight

clear Vs_2d weight_2d%% release some memory

%         % test for reviewing the results
%             tem = find(weight>0 & weight<1);
%             weight_2d(tem(1),:)
%             Vs_2d (tem(1),:)
%             weight_mask_2d (tem(1),:)

% for specific mask (gray or white matter) that has the same matter-density
% get the voxel-num percentage of each ICA-maps
% these percentages should be summed to 100%

 sum_of_voxels_of_EachMap=sum(Vs_weighted_2d,1);
 voxel_percentages_basedon_allMaps=sum_of_voxels_of_EachMap'/voxel_num_in_all_maps;
 voxel_percentages_basedon_theMask=sum_of_voxels_of_EachMap'/voxel_num_of_the_mask;
 total_sum_of_voxel_percentages_allMaps=sum(voxel_percentages_basedon_allMaps); % this should be always 1
 fprintf('\nThe total sum of the percentages based on allMaps listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_allMaps,5)) '%'],voxel_num_in_all_maps)
 for i=1:Maps
      fprintf('\nThe percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(voxel_percentages_basedon_allMaps(i),5)) '%'])
 end
 total_sum_of_voxel_percentages_theMask=sum(voxel_percentages_basedon_theMask); % this should be always less than 1
 fprintf('\n\nThe total sum of the percentages based on the mask listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_theMask,5)) '%'],voxel_num_of_the_mask)
 for i=1:Maps
      fprintf('\nThe percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(voxel_percentages_basedon_theMask(i),5)) '%'])
 end

 clear overlay_times weight

 %%% coregister to show the masks
    % newmask=FG_simple_rename_untouch(Vmat.fname,'FG_weight_mask.nii');
    % FG_write_vol(Vmat,reshape(overlay_times,[x,y,z]),newmask);
    % FG_enhanced_spm_check_registration(strvcat( newmask,mask));
    % delete (newmask)
    
    for k=1:n_dir
        CBFs=[];
        CBFs = spm_select('FPList',deblank(CBFs_dir(k,:)),'.*img');
        Subjs=size(CBFs,1);
        fprintf('\n\n******** Dealing with Group: \n******** %s **** \n',deblank(CBFs_dir(k,:)))
        %%% in case the CBFs are too large, do it half by half
        selections=[0:10:Subjs];
        if selections(end)<Subjs
           selections(end+1)=Subjs;
        end

        Sum_Vcbf_weighted_2d=zeros(x*y*z,Maps);
        Sum_Vcbf_2d=zeros(x*y*z,1);
        fprintf('\n\n--- Total %d parts, dealing with part - \n',length(selections))
        for n=1:length(selections)-1
            fprintf(' %d',n)
            selected=[selections(n)+1:selections(n+1)];
            n_selected=length(selected);

            Vcbf=FG_read_vols(CBFs(selected,:));
            Vcbf=FG_make_sure_NaN_to_zero_img(Vcbf);

            Vmask_4D = repmat(Vmask,[1,1,1,n_selected]);
            Vcbf = Vcbf.*Vmask_4D;
            clear Vmask_4D

            Vcbf_2d=reshape(Vcbf,[x*y*z,n_selected]);
            Sum_Vcbf_2d=Sum_Vcbf_2d+sum(Vcbf_2d,2);
            clear Vcbf

            %%% For memory saving sake, calculate the percentages Map by Map    
            for i=1:Maps
                Vcbf_weighted_2d = repmat(Vs_weighted_2d(:,i),[1,n_selected]).*Vcbf_2d;
                Sum_Vcbf_weighted_2d_tem(:,i) = sum(Vcbf_weighted_2d,2);
            end
            Sum_Vcbf_weighted_2d = Sum_Vcbf_weighted_2d + Sum_Vcbf_weighted_2d_tem;
            clear Vcbf_weighted_2d Sum_Vcbf_weighted_2d_tem

        end

        Avged_Vcbf_weighted_2d = Sum_Vcbf_weighted_2d/Subjs;
        Avged_Vcbf_2d = Sum_Vcbf_2d/Subjs;

        fprintf('\n\n--- The max averaged voxel-mean-CBF across subjs is %s ',num2str(max(Avged_Vcbf_weighted_2d(:))))
        fprintf('\n--- The min averaged voxel-mean-CBF across subjs is %s \n',num2str(min(Avged_Vcbf_weighted_2d(:))))


         sum_of_voxel_values_of_EachMap=sum(Avged_Vcbf_weighted_2d,1);
         voxel_value_percentages_basedon_allMaps(:,k)=sum_of_voxel_values_of_EachMap'/sum(sum_of_voxel_values_of_EachMap);
         voxel_value_percentages_basedon_theMask(:,k)=sum_of_voxel_values_of_EachMap'/sum(Avged_Vcbf_2d);
         total_sum_of_voxel_percentages_allMaps=sum(voxel_value_percentages_basedon_allMaps(:,k)); % this should be always 1
         fprintf('\nThe total sum of the CBF-value percentages based on allMaps listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_allMaps,5)) '%'],voxel_num_in_all_maps)
         for i=1:Maps
             tem=voxel_value_percentages_basedon_allMaps(:,k);
              fprintf('\nThe CBF-value percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(tem(i),5)) '%'])
         end
         total_sum_of_voxel_percentages_theMask=sum(voxel_value_percentages_basedon_theMask(:,k)); % this should be always less than 1
         fprintf('\n\nThe total sum of the CBF-value percentages based on the mask listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_theMask,5)) '%'],voxel_num_of_the_mask)
         for i=1:Maps
             tem=voxel_value_percentages_basedon_theMask(:,k);
              fprintf('\nThe CBF-value percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(tem(i),5)) '%'])
         end

         figure('Name','Voxel_percentages_basedon_allMaps')
         plot([1:Maps],voxel_percentages_basedon_allMaps,'--rs')
         [M,I]=max(voxel_percentages_basedon_allMaps);
         text(I,M,'\leftarrow voxel_percentages_basedon_allMaps',...
             'HorizontalAlignment','left')
         hold on
         plot([1:Maps],voxel_value_percentages_basedon_allMaps(:,k),'--bs')
         [M,I]=min(voxel_value_percentages_basedon_allMaps(:,k));
         text(I,M,'\leftarrow voxel_value_percentages_basedon_allMaps',...
             'HorizontalAlignment','left')
         grid on

         if k==2 || k==4
             figure('Name','Voxel_percentages_basedon_allMaps')
             plot([1:Maps],voxel_percentages_basedon_allMaps,'--rs')
             [M,I]=max(voxel_percentages_basedon_allMaps);
             text(I,M,'\leftarrow voxel_percentages_basedon_allMaps',...
                 'HorizontalAlignment','left')
             hold on
             plot([1:Maps],voxel_value_percentages_basedon_allMaps(:,(k-1):k),'--bs')
             [M,I]=min(voxel_value_percentages_basedon_allMaps(:,k));
             text(I,M,'\leftarrow voxel_value_percentages_basedon_allMaps',...
                 'HorizontalAlignment','left')
             grid on
         end

    end
         assignin('base','voxel_percentages_basedon_allMaps',voxel_percentages_basedon_allMaps)
         assignin('base','voxel_percentages_basedon_theMask',voxel_percentages_basedon_theMask)
         assignin('base','voxel_value_percentages_basedon_allMaps',voxel_value_percentages_basedon_allMaps)
         assignin('base','voxel_value_percentages_basedon_theMask',voxel_value_percentages_basedon_theMask)
         assignin('base','ICA_maps',names)

         FG_write_out_Excel_csv('Voxels_percentages_basedon_allMaps.csv',voxel_percentages_basedon_allMaps)
         FG_write_out_Excel_csv('Voxels_percentages_basedon_theMask.csv',voxel_percentages_basedon_theMask)
         
         FG_write_out_Excel_csv('Voxel_value_percentages_basedon_allMaps.csv',voxel_value_percentages_basedon_allMaps)
         FG_write_out_Excel_csv('Voxel_value_percentages_basedon_theMask.csv',voxel_value_percentages_basedon_theMask)
         
         alltxt=strvcat('--------The selected groups corresponding to each column-------',CBFs_dir);
         alltxt=strvcat(alltxt,'--------The selected ICA-masks corresponding to each row-------');
         alltxt=strvcat(alltxt,ICA_maps);
         alltxt=strvcat(alltxt,'--------The selected global mask-------');
         alltxt=strvcat(alltxt,mask);
         FG_write_out_txt('The_Groups_of_each_column.txt',alltxt)
        
fprintf('\n----All are done---\n')


