function FG_ICA_CBF_overlay_separation_method2(CBFs,graymap,whitemap)
clc;clear
if nargin==0
% select the CBF-network images
    CBFs = spm_select(inf,'.img|.nii','Select the selected ICA-CBF maps generated by ICA analysis', [],pwd);
    [pths,names]=FG_separate_files_into_name_and_path(CBFs);
    clear pths
    root_template=fullfile(FG_rootDir('grocer'),'Templates');
    graymap= spm_select(inf,'.img|.nii','Select the standard gray-matter map', [],root_template);
    whitemap = spm_select(inf,'.img|.nii','Select the standard white-matter map', [],root_template);
end

% read maps and make sure they are binarized and no-NaN
[Vs,Vmats]=FG_read_vols(CBFs);
x=size(Vs,1);
y=size(Vs,2);
z=size(Vs,3);
t=size(Vs,4);

Vmat=Vmats(1);
Vs=FG_make_sure_binary_img(Vs);

Vgray=FG_read_vols(graymap);
Vgray=FG_make_sure_binary_img(Vgray);

Vwhite=FG_read_vols(whitemap);
Vwhite=FG_make_sure_binary_img(Vwhite);

Vmask=FG_make_sure_binary_img(Vgray+Vwhite);
voxel_num_of_the_mask=sum(Vmask(:));

% mask all the CBF¡¡maps
Vmask_4D = repmat(Vmask,[1,1,1,t]);
clear Vmask Vmats
Vs = Vs.*Vmask_4D;

% judge whether each two are overlay 
    % initialize the overlay matrix
    %     overlay_mat=zeros(t,t);
    %     for i=1:t-1
    %         for j=i+1:t
    %            product = Vs(:,:,:,i).*Vs(:,:,:,j);
    %            product = squeeze(product);
    %            Sum_of_all_voxel = sum(product(:));
    %            if Sum_of_all_voxel
    %               overlay_mat(i,j)=1; 
    %            end
    %         end    
    %     end

Vs_2d=reshape(Vs,[x*y*z,t]);
voxel_num_in_all_maps=sum(logical(sum(Vs_2d,2)));
% Vmask_2D=reshape(Vmask_4D,[x*y*z,t]);
clear Vs Vmask_4D   %% release some memory


% get the overlay times of each voxel and create the weight for the overlay
% voxels on each ICA-map

overlay_times = sum(Vs_2d,2); % sum the values (i.e. 0 or 1) of each voxel across ICA-maps
weight = 1./overlay_times; % to the the weight for each voxel. for 1/0 situation, you will get inf values
% clear overlay_times
weight=FG_make_sure_inf_to_zero_img(weight); % make the inf values into zeros
weight_2d=repmat(weight,[1,t]);
Vs_weighted_2d=Vs_2d.*weight_2d; % each voxel value (i.e. 0 or 1) is multipled by the weight

clear Vs_2d weight_2d%% release some memory


% for a whole brain mask that contains both of the gray and white matter that has different matter-density
% get the voxel-num percentage of each ICA-maps
% these percentages should be summed to 100%
G_density=1;
W_density=0.85;

%% for gray-matter within each voxel
Vs_gray_weighted_2d=repmat(Vgray(:),[1,t]).*Vs_weighted_2d;

%% for white-matter within each voxel
Vs_white_weighted_2d=repmat(Vwhite(:),[1,t]).*Vs_weighted_2d;

%% for both of the gray & white-matter within each voxel
Vs_whole_weighted_2d=Vs_gray_weighted_2d*G_density+Vs_white_weighted_2d*W_density;

 sum_of_voxels_of_EachMap=sum(Vs_whole_weighted_2d,1);
 voxel_percentages_of_allMaps=sum_of_voxels_of_EachMap/voxel_num_in_all_maps;
 voxel_percentages_of_theMask=sum_of_voxels_of_EachMap/voxel_num_of_the_mask;
 total_sum_of_voxel_percentages_allMaps=sum(voxel_percentages_of_allMaps); % this should be always 1
 fprintf('\nThe total sum of the percentages based on allMaps listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_allMaps,5)) '%'],voxel_num_in_all_maps)
 for i=1:t
      fprintf('\nThe percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(voxel_percentages_of_allMaps(i),5)) '%'])
 end
 total_sum_of_voxel_percentages_theMask=sum(voxel_percentages_of_theMask); % this should be always less than 1
 fprintf('\n\nThe total sum of the percentages based on the mask listed below is   %s ( %d voxels)\n',[num2str(100*FG_roundn(total_sum_of_voxel_percentages_theMask,5)) '%'],voxel_num_of_the_mask)
 for i=1:t
      fprintf('\nThe percentage of [%s] is   %s',deblank(names(i,:)),[num2str(100*FG_roundn(voxel_percentages_of_theMask(i),5)) '%'])
 end

newmask=FG_simple_rename_untouch(Vmat.fname,'FG_weight_mask.nii');
FG_write_vol(Vmat,reshape(overlay_times,[x,y,z]),newmask);
FG_enhanced_spm_check_registration(strvcat( newmask,graymap,whitemap));
delete (newmask)


fprintf('\n----All are done---\n')

